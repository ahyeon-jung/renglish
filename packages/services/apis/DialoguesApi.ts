/* tslint:disable */
/* eslint-disable */
/**
 * Renglish API Swagger
 * Download: <a href=/api-docs-ahyeon-renglish-api/swagger-json target=\"_blank\">click here</a><br/><br/>github: <a href=\"https://github.com/ahyeon-jung/renglish\" target=\"_blank\">ahyeon-jung/renglish</a><br/>contact: ahyeon.aisha@gmail.com
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { CreateDialogueDto, UpdateDialogueDto } from "../models/index";
import {
  CreateDialogueDtoFromJSON,
  CreateDialogueDtoToJSON,
  UpdateDialogueDtoFromJSON,
  UpdateDialogueDtoToJSON,
} from "../models/index";

export interface DialogueControllerCreateDialogueRequest {
  speakerId: string;
  sceneId: string;
  createDialogueDto: CreateDialogueDto;
}

export interface DialogueControllerUpdateDialogueRequest {
  dialogueId: string;
  updateDialogueDto: UpdateDialogueDto;
}

/**
 *
 */
export class DialoguesApi extends runtime.BaseAPI {
  /**
   * 새로운 대사 정보를 생성합니다.
   * 대사 정보 생성 [ADMIN]
   */
  async dialogueControllerCreateDialogueRaw(
    requestParameters: DialogueControllerCreateDialogueRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["speakerId"] == null) {
      throw new runtime.RequiredError(
        "speakerId",
        'Required parameter "speakerId" was null or undefined when calling dialogueControllerCreateDialogue().',
      );
    }

    if (requestParameters["sceneId"] == null) {
      throw new runtime.RequiredError(
        "sceneId",
        'Required parameter "sceneId" was null or undefined when calling dialogueControllerCreateDialogue().',
      );
    }

    if (requestParameters["createDialogueDto"] == null) {
      throw new runtime.RequiredError(
        "createDialogueDto",
        'Required parameter "createDialogueDto" was null or undefined when calling dialogueControllerCreateDialogue().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("token", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/dialogues/{sceneId}/{speakerId}`
          .replace(`{${"speakerId"}}`, encodeURIComponent(String(requestParameters["speakerId"])))
          .replace(`{${"sceneId"}}`, encodeURIComponent(String(requestParameters["sceneId"]))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateDialogueDtoToJSON(requestParameters["createDialogueDto"]),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 새로운 대사 정보를 생성합니다.
   * 대사 정보 생성 [ADMIN]
   */
  async dialogueControllerCreateDialogue(
    requestParameters: DialogueControllerCreateDialogueRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.dialogueControllerCreateDialogueRaw(requestParameters, initOverrides);
  }

  /**
   * 대사 정보를 변경합니다.
   * 대사 정보 변경 [ADMIN]
   */
  async dialogueControllerUpdateDialogueRaw(
    requestParameters: DialogueControllerUpdateDialogueRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["dialogueId"] == null) {
      throw new runtime.RequiredError(
        "dialogueId",
        'Required parameter "dialogueId" was null or undefined when calling dialogueControllerUpdateDialogue().',
      );
    }

    if (requestParameters["updateDialogueDto"] == null) {
      throw new runtime.RequiredError(
        "updateDialogueDto",
        'Required parameter "updateDialogueDto" was null or undefined when calling dialogueControllerUpdateDialogue().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("token", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/dialogues/{dialogueId}`.replace(
          `{${"dialogueId"}}`,
          encodeURIComponent(String(requestParameters["dialogueId"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateDialogueDtoToJSON(requestParameters["updateDialogueDto"]),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 대사 정보를 변경합니다.
   * 대사 정보 변경 [ADMIN]
   */
  async dialogueControllerUpdateDialogue(
    requestParameters: DialogueControllerUpdateDialogueRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.dialogueControllerUpdateDialogueRaw(requestParameters, initOverrides);
  }
}
