/* tslint:disable */
/* eslint-disable */
/**
 * Renglish API Swagger
 * Download: <a href=/api-docs-ahyeon-renglish-api/swagger-json target=\"_blank\">click here</a><br/><br/>github: <a href=\"https://github.com/ahyeon-jung/renglish\" target=\"_blank\">ahyeon-jung/renglish</a><br/>contact: ahyeon.aisha@gmail.com
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { ExampleDto } from "./ExampleDto";
import {
  ExampleDtoFromJSON,
  ExampleDtoFromJSONTyped,
  ExampleDtoToJSON,
  ExampleDtoToJSONTyped,
} from "./ExampleDto";

/**
 *
 * @export
 * @interface Expression
 */
export interface Expression {
  /**
   * 아이디
   * @type {string}
   * @memberof Expression
   */
  id: string;
  /**
   * 생성일
   * @type {Date}
   * @memberof Expression
   */
  createdAt: Date;
  /**
   * 수정일
   * @type {Date}
   * @memberof Expression
   */
  updatedAt: Date;
  /**
   * 삭제일
   * @type {Date}
   * @memberof Expression
   */
  deletedAt: Date;
  /**
   *
   * @type {string}
   * @memberof Expression
   */
  expression: string;
  /**
   *
   * @type {string}
   * @memberof Expression
   */
  meaning: string;
  /**
   *
   * @type {string}
   * @memberof Expression
   */
  usage: string;
  /**
   * 영어 예문과 한글 번역 배열 (최대 2개)
   * @type {Array<ExampleDto>}
   * @memberof Expression
   */
  examples: Array<ExampleDto>;
}

/**
 * Check if a given object implements the Expression interface.
 */
export function instanceOfExpression(value: object): value is Expression {
  if (!("id" in value) || value["id"] === undefined) return false;
  if (!("createdAt" in value) || value["createdAt"] === undefined) return false;
  if (!("updatedAt" in value) || value["updatedAt"] === undefined) return false;
  if (!("deletedAt" in value) || value["deletedAt"] === undefined) return false;
  if (!("expression" in value) || value["expression"] === undefined) return false;
  if (!("meaning" in value) || value["meaning"] === undefined) return false;
  if (!("usage" in value) || value["usage"] === undefined) return false;
  if (!("examples" in value) || value["examples"] === undefined) return false;
  return true;
}

export function ExpressionFromJSON(json: any): Expression {
  return ExpressionFromJSONTyped(json, false);
}

export function ExpressionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Expression {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"],
    createdAt: new Date(json["createdAt"]),
    updatedAt: new Date(json["updatedAt"]),
    deletedAt: new Date(json["deletedAt"]),
    expression: json["expression"],
    meaning: json["meaning"],
    usage: json["usage"],
    examples: (json["examples"] as Array<any>).map(ExampleDtoFromJSON),
  };
}

export function ExpressionToJSON(json: any): Expression {
  return ExpressionToJSONTyped(json, false);
}

export function ExpressionToJSONTyped(
  value?: Expression | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    createdAt: value["createdAt"].toISOString(),
    updatedAt: value["updatedAt"].toISOString(),
    deletedAt: value["deletedAt"].toISOString(),
    expression: value["expression"],
    meaning: value["meaning"],
    usage: value["usage"],
    examples: (value["examples"] as Array<any>).map(ExampleDtoToJSON),
  };
}
