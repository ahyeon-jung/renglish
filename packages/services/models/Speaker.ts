/* tslint:disable */
/* eslint-disable */
/**
 * Renglish API Swagger
 * Download: <a href=/api-docs-ahyeon-renglish-api/swagger-json target=\"_blank\">click here</a><br/><br/>github: <a href=\"https://github.com/ahyeon-jung/renglish\" target=\"_blank\">ahyeon-jung/renglish</a><br/>contact: ahyeon.aisha@gmail.com
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface Speaker
 */
export interface Speaker {
  /**
   * 아이디
   * @type {string}
   * @memberof Speaker
   */
  id: string;
  /**
   * 생성일
   * @type {Date}
   * @memberof Speaker
   */
  createdAt: Date;
  /**
   * 수정일
   * @type {Date}
   * @memberof Speaker
   */
  updatedAt: Date;
  /**
   * 삭제일
   * @type {Date}
   * @memberof Speaker
   */
  deletedAt: Date;
  /**
   *
   * @type {string}
   * @memberof Speaker
   */
  speakerName: string;
  /**
   *
   * @type {string}
   * @memberof Speaker
   */
  speakerType: string;
}

/**
 * Check if a given object implements the Speaker interface.
 */
export function instanceOfSpeaker(value: object): value is Speaker {
  if (!("id" in value) || value["id"] === undefined) return false;
  if (!("createdAt" in value) || value["createdAt"] === undefined) return false;
  if (!("updatedAt" in value) || value["updatedAt"] === undefined) return false;
  if (!("deletedAt" in value) || value["deletedAt"] === undefined) return false;
  if (!("speakerName" in value) || value["speakerName"] === undefined) return false;
  if (!("speakerType" in value) || value["speakerType"] === undefined) return false;
  return true;
}

export function SpeakerFromJSON(json: any): Speaker {
  return SpeakerFromJSONTyped(json, false);
}

export function SpeakerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Speaker {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"],
    createdAt: new Date(json["createdAt"]),
    updatedAt: new Date(json["updatedAt"]),
    deletedAt: new Date(json["deletedAt"]),
    speakerName: json["speaker_name"],
    speakerType: json["speaker_type"],
  };
}

export function SpeakerToJSON(json: any): Speaker {
  return SpeakerToJSONTyped(json, false);
}

export function SpeakerToJSONTyped(
  value?: Speaker | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    createdAt: value["createdAt"].toISOString(),
    updatedAt: value["updatedAt"].toISOString(),
    deletedAt: value["deletedAt"].toISOString(),
    speaker_name: value["speakerName"],
    speaker_type: value["speakerType"],
  };
}
