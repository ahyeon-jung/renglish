/* tslint:disable */
/* eslint-disable */
/**
 * Renglish API Swagger
 * Download: <a href=/api-docs-ahyeon-renglish-api/swagger-json target=\"_blank\">click here</a><br/><br/>github: <a href=\"https://github.com/ahyeon-jung/renglish\" target=\"_blank\">ahyeon-jung/renglish</a><br/>contact: ahyeon.aisha@gmail.com
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { User } from "./User";
import { UserFromJSON, UserFromJSONTyped, UserToJSON, UserToJSONTyped } from "./User";
import type { StudySceneDto } from "./StudySceneDto";
import {
  StudySceneDtoFromJSON,
  StudySceneDtoFromJSONTyped,
  StudySceneDtoToJSON,
  StudySceneDtoToJSONTyped,
} from "./StudySceneDto";

/**
 *
 * @export
 * @interface StudyDto
 */
export interface StudyDto {
  /**
   * 아이디
   * @type {string}
   * @memberof StudyDto
   */
  id: string;
  /**
   * 생성일
   * @type {Date}
   * @memberof StudyDto
   */
  createdAt: Date;
  /**
   * 수정일
   * @type {Date}
   * @memberof StudyDto
   */
  updatedAt: Date;
  /**
   * 스터디 진행 일자
   * @type {Date}
   * @memberof StudyDto
   */
  studiedAt: Date;
  /**
   * 스터디 제목
   * @type {string}
   * @memberof StudyDto
   */
  title: string;
  /**
   * 스터디 설명
   * @type {string}
   * @memberof StudyDto
   */
  description: string;
  /**
   * 스터디 완료 여부
   * @type {boolean}
   * @memberof StudyDto
   */
  isCompleted: boolean;
  /**
   * 스터디 신청자
   * @type {Array<User>}
   * @memberof StudyDto
   */
  applicants?: Array<User>;
  /**
   * 스터디 참여자
   * @type {Array<User>}
   * @memberof StudyDto
   */
  participants?: Array<User>;
  /**
   *
   * @type {StudySceneDto}
   * @memberof StudyDto
   */
  scene: StudySceneDto;
  /**
   * 참여자 수
   * @type {number}
   * @memberof StudyDto
   */
  participantCount: number;
  /**
   * 지원자 수
   * @type {number}
   * @memberof StudyDto
   */
  applicantCount: number;
}

/**
 * Check if a given object implements the StudyDto interface.
 */
export function instanceOfStudyDto(value: object): value is StudyDto {
  if (!("id" in value) || value["id"] === undefined) return false;
  if (!("createdAt" in value) || value["createdAt"] === undefined) return false;
  if (!("updatedAt" in value) || value["updatedAt"] === undefined) return false;
  if (!("studiedAt" in value) || value["studiedAt"] === undefined) return false;
  if (!("title" in value) || value["title"] === undefined) return false;
  if (!("description" in value) || value["description"] === undefined) return false;
  if (!("isCompleted" in value) || value["isCompleted"] === undefined) return false;
  if (!("scene" in value) || value["scene"] === undefined) return false;
  if (!("participantCount" in value) || value["participantCount"] === undefined) return false;
  if (!("applicantCount" in value) || value["applicantCount"] === undefined) return false;
  return true;
}

export function StudyDtoFromJSON(json: any): StudyDto {
  return StudyDtoFromJSONTyped(json, false);
}

export function StudyDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): StudyDto {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"],
    createdAt: new Date(json["createdAt"]),
    updatedAt: new Date(json["updatedAt"]),
    studiedAt: new Date(json["studiedAt"]),
    title: json["title"],
    description: json["description"],
    isCompleted: json["isCompleted"],
    applicants:
      json["applicants"] == null ? undefined : (json["applicants"] as Array<any>).map(UserFromJSON),
    participants:
      json["participants"] == null
        ? undefined
        : (json["participants"] as Array<any>).map(UserFromJSON),
    scene: StudySceneDtoFromJSON(json["scene"]),
    participantCount: json["participantCount"],
    applicantCount: json["applicantCount"],
  };
}

export function StudyDtoToJSON(json: any): StudyDto {
  return StudyDtoToJSONTyped(json, false);
}

export function StudyDtoToJSONTyped(
  value?: StudyDto | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    createdAt: value["createdAt"].toISOString(),
    updatedAt: value["updatedAt"].toISOString(),
    studiedAt: value["studiedAt"].toISOString(),
    title: value["title"],
    description: value["description"],
    isCompleted: value["isCompleted"],
    applicants:
      value["applicants"] == null ? undefined : (value["applicants"] as Array<any>).map(UserToJSON),
    participants:
      value["participants"] == null
        ? undefined
        : (value["participants"] as Array<any>).map(UserToJSON),
    scene: StudySceneDtoToJSON(value["scene"]),
    participantCount: value["participantCount"],
    applicantCount: value["applicantCount"],
  };
}
