/* tslint:disable */
/* eslint-disable */
/**
 * Renglish API Swagger
 * Download: <a href=/api-docs-ahyeon-renglish-api/swagger-json target=\"_blank\">click here</a><br/><br/>github: <a href=\"https://github.com/ahyeon-jung/renglish\" target=\"_blank\">ahyeon-jung/renglish</a><br/>contact: ahyeon.aisha@gmail.com
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Scene } from "./Scene";
import { SceneFromJSON, SceneFromJSONTyped, SceneToJSON, SceneToJSONTyped } from "./Scene";
import type { Speaker } from "./Speaker";
import {
  SpeakerFromJSON,
  SpeakerFromJSONTyped,
  SpeakerToJSON,
  SpeakerToJSONTyped,
} from "./Speaker";

/**
 *
 * @export
 * @interface Dialogue
 */
export interface Dialogue {
  /**
   * 아이디
   * @type {string}
   * @memberof Dialogue
   */
  id: string;
  /**
   * 생성일
   * @type {Date}
   * @memberof Dialogue
   */
  createdAt: Date;
  /**
   * 수정일
   * @type {Date}
   * @memberof Dialogue
   */
  updatedAt: Date;
  /**
   * 삭제일
   * @type {Date}
   * @memberof Dialogue
   */
  deletedAt: Date;
  /**
   *
   * @type {string}
   * @memberof Dialogue
   */
  englishScript: string;
  /**
   *
   * @type {string}
   * @memberof Dialogue
   */
  koreanScript: string;
  /**
   *
   * @type {number}
   * @memberof Dialogue
   */
  order: number;
  /**
   *
   * @type {Scene}
   * @memberof Dialogue
   */
  scene: Scene;
  /**
   *
   * @type {Speaker}
   * @memberof Dialogue
   */
  speaker: Speaker;
}

/**
 * Check if a given object implements the Dialogue interface.
 */
export function instanceOfDialogue(value: object): value is Dialogue {
  if (!("id" in value) || value["id"] === undefined) return false;
  if (!("createdAt" in value) || value["createdAt"] === undefined) return false;
  if (!("updatedAt" in value) || value["updatedAt"] === undefined) return false;
  if (!("deletedAt" in value) || value["deletedAt"] === undefined) return false;
  if (!("englishScript" in value) || value["englishScript"] === undefined) return false;
  if (!("koreanScript" in value) || value["koreanScript"] === undefined) return false;
  if (!("order" in value) || value["order"] === undefined) return false;
  if (!("scene" in value) || value["scene"] === undefined) return false;
  if (!("speaker" in value) || value["speaker"] === undefined) return false;
  return true;
}

export function DialogueFromJSON(json: any): Dialogue {
  return DialogueFromJSONTyped(json, false);
}

export function DialogueFromJSONTyped(json: any, ignoreDiscriminator: boolean): Dialogue {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"],
    createdAt: new Date(json["createdAt"]),
    updatedAt: new Date(json["updatedAt"]),
    deletedAt: new Date(json["deletedAt"]),
    englishScript: json["english_script"],
    koreanScript: json["korean_script"],
    order: json["order"],
    scene: SceneFromJSON(json["scene"]),
    speaker: SpeakerFromJSON(json["speaker"]),
  };
}

export function DialogueToJSON(json: any): Dialogue {
  return DialogueToJSONTyped(json, false);
}

export function DialogueToJSONTyped(
  value?: Dialogue | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    createdAt: value["createdAt"].toISOString(),
    updatedAt: value["updatedAt"].toISOString(),
    deletedAt: value["deletedAt"].toISOString(),
    english_script: value["englishScript"],
    korean_script: value["koreanScript"],
    order: value["order"],
    scene: SceneToJSON(value["scene"]),
    speaker: SpeakerToJSON(value["speaker"]),
  };
}
