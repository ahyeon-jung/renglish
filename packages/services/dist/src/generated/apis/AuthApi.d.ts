/**
 * Renglish API Swagger
 * Download: <a href=/api-docs-ahyeon-renglish-api/swagger-json target=\"_blank\">click here</a><br/><br/>github: <a href=\"https://github.com/ahyeon-jung/renglish\" target=\"_blank\">ahyeon-jung/renglish</a><br/>contact: ahyeon.aisha@gmail.com
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import type {
  CreateUserDto,
  LoginDto,
  LoginResponseDto,
  PasswordResetDto,
  TokensDto,
} from "../models/index";
export interface AuthControllerCheckValidAccessTokenRequest {
  accessToken: string;
}
export interface AuthControllerLoginRequest {
  loginDto: LoginDto;
}
export interface AuthControllerPasswordResetRequest {
  passwordResetDto: PasswordResetDto;
}
export interface AuthControllerRegisterRequest {
  createUserDto: CreateUserDto;
}
/**
 *
 */
export declare class AuthApi extends runtime.BaseAPI {
  /**
   * 관리자 여부를 확인합니다.
   * 관리자 여부 확인
   */
  authControllerCheckIsAdminRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<boolean>>;
  /**
   * 관리자 여부를 확인합니다.
   * 관리자 여부 확인
   */
  authControllerCheckIsAdmin(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<boolean>;
  /**
   * 유효한 Access Token인지 확인합니다.
   * Access Token 유효성 확인
   */
  authControllerCheckValidAccessTokenRaw(
    requestParameters: AuthControllerCheckValidAccessTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<boolean>>;
  /**
   * 유효한 Access Token인지 확인합니다.
   * Access Token 유효성 확인
   */
  authControllerCheckValidAccessToken(
    requestParameters: AuthControllerCheckValidAccessTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<boolean>;
  /**
   * 구글 계정으로 로그인합니다.
   * 구글 로그인
   */
  authControllerGoogleAuthRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;
  /**
   * 구글 계정으로 로그인합니다.
   * 구글 로그인
   */
  authControllerGoogleAuth(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;
  /**
   * 구글 로그인 후 콜백을 처리합니다.
   * 구글 로그인 콜백
   */
  authControllerGoogleAuthRedirectRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;
  /**
   * 구글 로그인 후 콜백을 처리합니다.
   * 구글 로그인 콜백
   */
  authControllerGoogleAuthRedirect(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;
  /**
   */
  authControllerKakaoCallbackRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;
  /**
   */
  authControllerKakaoCallback(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;
  /**
   * 카카오 계정으로 로그인합니다.
   * 카카오 로그인
   */
  authControllerKakaoLoginRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;
  /**
   * 카카오 계정으로 로그인합니다.
   * 카카오 로그인
   */
  authControllerKakaoLogin(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;
  /**
   * 사용자 로그인을 처리합니다.
   * 로그인
   */
  authControllerLoginRaw(
    requestParameters: AuthControllerLoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<LoginResponseDto>>;
  /**
   * 사용자 로그인을 처리합니다.
   * 로그인
   */
  authControllerLogin(
    requestParameters: AuthControllerLoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<LoginResponseDto>;
  /**
   * 네이버 로그인 후 콜백을 처리합니다.
   * 네이버 로그인 콜백
   */
  authControllerNaverCallbackRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;
  /**
   * 네이버 로그인 후 콜백을 처리합니다.
   * 네이버 로그인 콜백
   */
  authControllerNaverCallback(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;
  /**
   * 네이버 계정으로 로그인합니다.
   * 네이버 로그인
   */
  authControllerNaverLoginRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;
  /**
   * 네이버 계정으로 로그인합니다.
   * 네이버 로그인
   */
  authControllerNaverLogin(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;
  /**
   * 비밀번호 초기화를 처리합니다.
   * 비밀번호 초기화
   */
  authControllerPasswordResetRaw(
    requestParameters: AuthControllerPasswordResetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;
  /**
   * 비밀번호 초기화를 처리합니다.
   * 비밀번호 초기화
   */
  authControllerPasswordReset(
    requestParameters: AuthControllerPasswordResetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;
  /**
   * 유효한 Refresh Token을 이용해 새로운 Access Token과 Refresh Token을 발급받습니다.
   * Access Token 재발급
   */
  authControllerRefreshRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<TokensDto>>;
  /**
   * 유효한 Refresh Token을 이용해 새로운 Access Token과 Refresh Token을 발급받습니다.
   * Access Token 재발급
   */
  authControllerRefresh(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<TokensDto>;
  /**
   * 새로운 사용자를 등록합니다.
   * 회원가입
   */
  authControllerRegisterRaw(
    requestParameters: AuthControllerRegisterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;
  /**
   * 새로운 사용자를 등록합니다.
   * 회원가입
   */
  authControllerRegister(
    requestParameters: AuthControllerRegisterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;
}
//# sourceMappingURL=AuthApi.d.ts.map
