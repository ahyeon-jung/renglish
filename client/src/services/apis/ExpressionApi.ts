/* tslint:disable */
/* eslint-disable */
/**
 * Renglish API Swagger
 * Download: <a href=/api-docs-ahyeon-renglish-api/swagger-json target=\"_blank\">click here</a><br/><br/>github: <a href=\"https://github.com/ahyeon-jung/renglish\" target=\"_blank\">ahyeon-jung/renglish</a><br/>contact: ahyeon.aisha@gmail.com
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateExpressionDto,
  UpdateExpressionDto,
} from '../models/index';
import {
    CreateExpressionDtoFromJSON,
    CreateExpressionDtoToJSON,
    UpdateExpressionDtoFromJSON,
    UpdateExpressionDtoToJSON,
} from '../models/index';

export interface ExpressionControllerCreateRequest {
    sceneId: string;
    createExpressionDto: CreateExpressionDto;
}

export interface ExpressionControllerFindExpressionBySceneIdRequest {
    expressionId: string;
    sceneId: string;
}

export interface ExpressionControllerRemoveRequest {
    expressionId: string;
}

export interface ExpressionControllerUpdateRequest {
    expressionId: string;
    updateExpressionDto: UpdateExpressionDto;
}

/**
 * 
 */
export class ExpressionApi extends runtime.BaseAPI {

    /**
     * 해당 장면의 영어 표현 추가하기
     * 영어 표현 추가하기 [ADMIN]
     */
    async expressionControllerCreateRaw(requestParameters: ExpressionControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sceneId'] == null) {
            throw new runtime.RequiredError(
                'sceneId',
                'Required parameter "sceneId" was null or undefined when calling expressionControllerCreate().'
            );
        }

        if (requestParameters['createExpressionDto'] == null) {
            throw new runtime.RequiredError(
                'createExpressionDto',
                'Required parameter "createExpressionDto" was null or undefined when calling expressionControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/expressions/{sceneId}`.replace(`{${"sceneId"}}`, encodeURIComponent(String(requestParameters['sceneId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateExpressionDtoToJSON(requestParameters['createExpressionDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 해당 장면의 영어 표현 추가하기
     * 영어 표현 추가하기 [ADMIN]
     */
    async expressionControllerCreate(requestParameters: ExpressionControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.expressionControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * 이번주 영어 표현을 10개 가져옵니다.
     * 이번주 영어 표현 가져오기
     */
    async expressionControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/expressions/weekly`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 이번주 영어 표현을 10개 가져옵니다.
     * 이번주 영어 표현 가져오기
     */
    async expressionControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.expressionControllerFindAllRaw(initOverrides);
    }

    /**
     * 해당 장면의 영어 표현 가져오기
     * 해당 장면의 영어 표현 가져오기 [TOKEN]
     */
    async expressionControllerFindExpressionBySceneIdRaw(requestParameters: ExpressionControllerFindExpressionBySceneIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['expressionId'] == null) {
            throw new runtime.RequiredError(
                'expressionId',
                'Required parameter "expressionId" was null or undefined when calling expressionControllerFindExpressionBySceneId().'
            );
        }

        if (requestParameters['sceneId'] == null) {
            throw new runtime.RequiredError(
                'sceneId',
                'Required parameter "sceneId" was null or undefined when calling expressionControllerFindExpressionBySceneId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/expressions/{sceneId}`.replace(`{${"expressionId"}}`, encodeURIComponent(String(requestParameters['expressionId']))).replace(`{${"sceneId"}}`, encodeURIComponent(String(requestParameters['sceneId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 해당 장면의 영어 표현 가져오기
     * 해당 장면의 영어 표현 가져오기 [TOKEN]
     */
    async expressionControllerFindExpressionBySceneId(requestParameters: ExpressionControllerFindExpressionBySceneIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.expressionControllerFindExpressionBySceneIdRaw(requestParameters, initOverrides);
    }

    /**
     * 영어 표현 수정하기
     * 영어 표현 삭제하기 [ADMIN]
     */
    async expressionControllerRemoveRaw(requestParameters: ExpressionControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['expressionId'] == null) {
            throw new runtime.RequiredError(
                'expressionId',
                'Required parameter "expressionId" was null or undefined when calling expressionControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/expressions/{expressionId}`.replace(`{${"expressionId"}}`, encodeURIComponent(String(requestParameters['expressionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 영어 표현 수정하기
     * 영어 표현 삭제하기 [ADMIN]
     */
    async expressionControllerRemove(requestParameters: ExpressionControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.expressionControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     * 영어 표현 수정하기
     * 영어 표현 수정하기 [ADMIN]
     */
    async expressionControllerUpdateRaw(requestParameters: ExpressionControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['expressionId'] == null) {
            throw new runtime.RequiredError(
                'expressionId',
                'Required parameter "expressionId" was null or undefined when calling expressionControllerUpdate().'
            );
        }

        if (requestParameters['updateExpressionDto'] == null) {
            throw new runtime.RequiredError(
                'updateExpressionDto',
                'Required parameter "updateExpressionDto" was null or undefined when calling expressionControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/expressions/{expressionId}`.replace(`{${"expressionId"}}`, encodeURIComponent(String(requestParameters['expressionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateExpressionDtoToJSON(requestParameters['updateExpressionDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 영어 표현 수정하기
     * 영어 표현 수정하기 [ADMIN]
     */
    async expressionControllerUpdate(requestParameters: ExpressionControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.expressionControllerUpdateRaw(requestParameters, initOverrides);
    }

}
