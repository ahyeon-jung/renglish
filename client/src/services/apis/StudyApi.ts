/* tslint:disable */
/* eslint-disable */
/**
 * Renglish API Swagger
 * Download: <a href=/api-docs-ahyeon-renglish-api/swagger-json target=\"_blank\">click here</a><br/><br/>github: <a href=\"https://github.com/ahyeon-jung/renglish\" target=\"_blank\">ahyeon-jung/renglish</a><br/>contact: ahyeon.aisha@gmail.com
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { PaginationStudyResponseDto, Study, UpdateStudyDto } from '../models/index';
import {
  PaginationStudyResponseDtoFromJSON,
  PaginationStudyResponseDtoToJSON,
  StudyFromJSON,
  StudyToJSON,
  UpdateStudyDtoFromJSON,
  UpdateStudyDtoToJSON,
} from '../models/index';

export interface StudyControllerAddApplicantRequest {
  studyId: string;
}

export interface StudyControllerAddParticipantRequest {
  studyId: string;
  userId: string;
}

export interface StudyControllerFindAllRequest {
  offset: number;
  limit: number;
  status?: string;
}

export interface StudyControllerFindOneRequest {
  studyId: string;
}

export interface StudyControllerRemoveRequest {
  studyId: string;
}

export interface StudyControllerRemoveApplicantRequest {
  studyId: string;
}

export interface StudyControllerRemoveApplicantByAdminRequest {
  studyId: string;
  userId: string;
}

export interface StudyControllerRemoveParticipantsRequest {
  studyId: string;
  userId: string;
}

export interface StudyControllerUpdateRequest {
  studyId: string;
  updateStudyDto: UpdateStudyDto;
}

/**
 *
 */
export class StudyApi extends runtime.BaseAPI {
  /**
   * 스터디에 참여중인지 조회합니다(applicant).
   * 스터디 지원하기  [TOKEN]
   */
  async studyControllerAddApplicantRaw(
    requestParameters: StudyControllerAddApplicantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Study>> {
    if (requestParameters['studyId'] == null) {
      throw new runtime.RequiredError(
        'studyId',
        'Required parameter "studyId" was null or undefined when calling studyControllerAddApplicant().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('token', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/studies/{studyId}/add-applicant`.replace(
          `{${'studyId'}}`,
          encodeURIComponent(String(requestParameters['studyId'])),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StudyFromJSON(jsonValue));
  }

  /**
   * 스터디에 참여중인지 조회합니다(applicant).
   * 스터디 지원하기  [TOKEN]
   */
  async studyControllerAddApplicant(
    requestParameters: StudyControllerAddApplicantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Study> {
    const response = await this.studyControllerAddApplicantRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 스터디 참여자를 수락합니다(participant).
   * 스터디 참여 수락하기  [ADMIN]
   */
  async studyControllerAddParticipantRaw(
    requestParameters: StudyControllerAddParticipantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Study>> {
    if (requestParameters['studyId'] == null) {
      throw new runtime.RequiredError(
        'studyId',
        'Required parameter "studyId" was null or undefined when calling studyControllerAddParticipant().',
      );
    }

    if (requestParameters['userId'] == null) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter "userId" was null or undefined when calling studyControllerAddParticipant().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('token', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/studies/{studyId}/add-participant/{userId}`
          .replace(`{${'studyId'}}`, encodeURIComponent(String(requestParameters['studyId'])))
          .replace(`{${'userId'}}`, encodeURIComponent(String(requestParameters['userId']))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StudyFromJSON(jsonValue));
  }

  /**
   * 스터디 참여자를 수락합니다(participant).
   * 스터디 참여 수락하기  [ADMIN]
   */
  async studyControllerAddParticipant(
    requestParameters: StudyControllerAddParticipantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Study> {
    const response = await this.studyControllerAddParticipantRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 스터디 목록을 조회합니다.
   * 스터디 목록 조회하기
   */
  async studyControllerFindAllRaw(
    requestParameters: StudyControllerFindAllRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PaginationStudyResponseDto>> {
    if (requestParameters['offset'] == null) {
      throw new runtime.RequiredError(
        'offset',
        'Required parameter "offset" was null or undefined when calling studyControllerFindAll().',
      );
    }

    if (requestParameters['limit'] == null) {
      throw new runtime.RequiredError(
        'limit',
        'Required parameter "limit" was null or undefined when calling studyControllerFindAll().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters['status'] != null) {
      queryParameters['status'] = requestParameters['status'];
    }

    if (requestParameters['offset'] != null) {
      queryParameters['offset'] = requestParameters['offset'];
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('token', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/studies`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PaginationStudyResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * 스터디 목록을 조회합니다.
   * 스터디 목록 조회하기
   */
  async studyControllerFindAll(
    requestParameters: StudyControllerFindAllRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PaginationStudyResponseDto> {
    const response = await this.studyControllerFindAllRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 스터디를 조회합니다.
   * 스터디 조회하기
   */
  async studyControllerFindOneRaw(
    requestParameters: StudyControllerFindOneRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Study>> {
    if (requestParameters['studyId'] == null) {
      throw new runtime.RequiredError(
        'studyId',
        'Required parameter "studyId" was null or undefined when calling studyControllerFindOne().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('token', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/studies/{studyId}`.replace(
          `{${'studyId'}}`,
          encodeURIComponent(String(requestParameters['studyId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StudyFromJSON(jsonValue));
  }

  /**
   * 스터디를 조회합니다.
   * 스터디 조회하기
   */
  async studyControllerFindOne(
    requestParameters: StudyControllerFindOneRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Study> {
    const response = await this.studyControllerFindOneRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 스터디를 삭제합니다.
   * 스터디 삭제하기 [ADMIN]
   */
  async studyControllerRemoveRaw(
    requestParameters: StudyControllerRemoveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['studyId'] == null) {
      throw new runtime.RequiredError(
        'studyId',
        'Required parameter "studyId" was null or undefined when calling studyControllerRemove().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('token', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/studies/{studyId}`.replace(
          `{${'studyId'}}`,
          encodeURIComponent(String(requestParameters['studyId'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 스터디를 삭제합니다.
   * 스터디 삭제하기 [ADMIN]
   */
  async studyControllerRemove(
    requestParameters: StudyControllerRemoveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.studyControllerRemoveRaw(requestParameters, initOverrides);
  }

  /**
   * 토큰 유저가 스터디 지원을 취소합니다(applicant).
   * 스터디 지원 취소하기  [TOKEN]
   */
  async studyControllerRemoveApplicantRaw(
    requestParameters: StudyControllerRemoveApplicantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Study>> {
    if (requestParameters['studyId'] == null) {
      throw new runtime.RequiredError(
        'studyId',
        'Required parameter "studyId" was null or undefined when calling studyControllerRemoveApplicant().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('token', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/studies/{studyId}/remove-applicant`.replace(
          `{${'studyId'}}`,
          encodeURIComponent(String(requestParameters['studyId'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StudyFromJSON(jsonValue));
  }

  /**
   * 토큰 유저가 스터디 지원을 취소합니다(applicant).
   * 스터디 지원 취소하기  [TOKEN]
   */
  async studyControllerRemoveApplicant(
    requestParameters: StudyControllerRemoveApplicantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Study> {
    const response = await this.studyControllerRemoveApplicantRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 관리자가 스터디 지원자를 제거합니다(applicant).
   * 스터디 지원자 취소하기  [ADMIN]
   */
  async studyControllerRemoveApplicantByAdminRaw(
    requestParameters: StudyControllerRemoveApplicantByAdminRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Study>> {
    if (requestParameters['studyId'] == null) {
      throw new runtime.RequiredError(
        'studyId',
        'Required parameter "studyId" was null or undefined when calling studyControllerRemoveApplicantByAdmin().',
      );
    }

    if (requestParameters['userId'] == null) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter "userId" was null or undefined when calling studyControllerRemoveApplicantByAdmin().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('token', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/studies/{studyId}/remove-applicant/{userId}`
          .replace(`{${'studyId'}}`, encodeURIComponent(String(requestParameters['studyId'])))
          .replace(`{${'userId'}}`, encodeURIComponent(String(requestParameters['userId']))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StudyFromJSON(jsonValue));
  }

  /**
   * 관리자가 스터디 지원자를 제거합니다(applicant).
   * 스터디 지원자 취소하기  [ADMIN]
   */
  async studyControllerRemoveApplicantByAdmin(
    requestParameters: StudyControllerRemoveApplicantByAdminRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Study> {
    const response = await this.studyControllerRemoveApplicantByAdminRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 관리자가 스터디 참여자를 지원자로 변경합니다(applicant).
   * 스터디 참여자 취소하기  [ADMIN]
   */
  async studyControllerRemoveParticipantsRaw(
    requestParameters: StudyControllerRemoveParticipantsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Study>> {
    if (requestParameters['studyId'] == null) {
      throw new runtime.RequiredError(
        'studyId',
        'Required parameter "studyId" was null or undefined when calling studyControllerRemoveParticipants().',
      );
    }

    if (requestParameters['userId'] == null) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter "userId" was null or undefined when calling studyControllerRemoveParticipants().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('token', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/studies/{studyId}/remove-participant/{userId}`
          .replace(`{${'studyId'}}`, encodeURIComponent(String(requestParameters['studyId'])))
          .replace(`{${'userId'}}`, encodeURIComponent(String(requestParameters['userId']))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StudyFromJSON(jsonValue));
  }

  /**
   * 관리자가 스터디 참여자를 지원자로 변경합니다(applicant).
   * 스터디 참여자 취소하기  [ADMIN]
   */
  async studyControllerRemoveParticipants(
    requestParameters: StudyControllerRemoveParticipantsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Study> {
    const response = await this.studyControllerRemoveParticipantsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 스터디를 수정합니다.
   * 스터디 수정하기 [ADMIN]
   */
  async studyControllerUpdateRaw(
    requestParameters: StudyControllerUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['studyId'] == null) {
      throw new runtime.RequiredError(
        'studyId',
        'Required parameter "studyId" was null or undefined when calling studyControllerUpdate().',
      );
    }

    if (requestParameters['updateStudyDto'] == null) {
      throw new runtime.RequiredError(
        'updateStudyDto',
        'Required parameter "updateStudyDto" was null or undefined when calling studyControllerUpdate().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('token', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/studies/{studyId}`.replace(
          `{${'studyId'}}`,
          encodeURIComponent(String(requestParameters['studyId'])),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateStudyDtoToJSON(requestParameters['updateStudyDto']),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 스터디를 수정합니다.
   * 스터디 수정하기 [ADMIN]
   */
  async studyControllerUpdate(
    requestParameters: StudyControllerUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.studyControllerUpdateRaw(requestParameters, initOverrides);
  }
}
