/* tslint:disable */
/* eslint-disable */
/**
 * Renglish API Swagger
 * Download: <a href=/api-docs-ahyeon-renglish-api/swagger-json target=\"_blank\">click here</a><br/><br/>github: <a href=\"https://github.com/ahyeon-jung/renglish\" target=\"_blank\">ahyeon-jung/renglish</a><br/>contact: ahyeon.aisha@gmail.com
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateSceneDto,
  CreateStudyDto,
  ExtendedSceneDto,
  PaginationSceneResponseDto,
  UpdateSceneDto,
} from '../models/index';
import {
    CreateSceneDtoFromJSON,
    CreateSceneDtoToJSON,
    CreateStudyDtoFromJSON,
    CreateStudyDtoToJSON,
    ExtendedSceneDtoFromJSON,
    ExtendedSceneDtoToJSON,
    PaginationSceneResponseDtoFromJSON,
    PaginationSceneResponseDtoToJSON,
    UpdateSceneDtoFromJSON,
    UpdateSceneDtoToJSON,
} from '../models/index';

export interface SceneControllerAddStudyRequest {
    sceneId: string;
    studyId: string;
}

export interface SceneControllerCreateRequest {
    sceneId: string;
    createStudyDto: CreateStudyDto;
}

export interface SceneControllerCreateSceneRequest {
    movieId: string;
    createSceneDto: CreateSceneDto;
}

export interface SceneControllerDeleteSceneRequest {
    sceneId: string;
}

export interface SceneControllerFindAllRequest {
    sceneId: string;
}

export interface SceneControllerFindAllSceneRequest {
    offset: number;
    limit: number;
    keyword?: string;
}

export interface SceneControllerFindSceneByIdRequest {
    sceneId: string;
}

export interface SceneControllerUpdateSceneRequest {
    sceneId: string;
    updateSceneDto: UpdateSceneDto;
}

/**
 * 
 */
export class ScenesApi extends runtime.BaseAPI {

    /**
     * 장면에 기존의 스터디를 추가합니다.
     * 장면에 기존 스터디 추가  [ADMIN]
     */
    async sceneControllerAddStudyRaw(requestParameters: SceneControllerAddStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sceneId'] == null) {
            throw new runtime.RequiredError(
                'sceneId',
                'Required parameter "sceneId" was null or undefined when calling sceneControllerAddStudy().'
            );
        }

        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling sceneControllerAddStudy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/scenes/{sceneId}/study/{studyId}`.replace(`{${"sceneId"}}`, encodeURIComponent(String(requestParameters['sceneId']))).replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 장면에 기존의 스터디를 추가합니다.
     * 장면에 기존 스터디 추가  [ADMIN]
     */
    async sceneControllerAddStudy(requestParameters: SceneControllerAddStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sceneControllerAddStudyRaw(requestParameters, initOverrides);
    }

    /**
     * 새로운 스터디를 생성합니다.
     * 새로운 스터디 생성하기  [ADMIN]
     */
    async sceneControllerCreateRaw(requestParameters: SceneControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sceneId'] == null) {
            throw new runtime.RequiredError(
                'sceneId',
                'Required parameter "sceneId" was null or undefined when calling sceneControllerCreate().'
            );
        }

        if (requestParameters['createStudyDto'] == null) {
            throw new runtime.RequiredError(
                'createStudyDto',
                'Required parameter "createStudyDto" was null or undefined when calling sceneControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/scenes/{sceneId}/study`.replace(`{${"sceneId"}}`, encodeURIComponent(String(requestParameters['sceneId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStudyDtoToJSON(requestParameters['createStudyDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 새로운 스터디를 생성합니다.
     * 새로운 스터디 생성하기  [ADMIN]
     */
    async sceneControllerCreate(requestParameters: SceneControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sceneControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * 새로운 장면 정보를 생성합니다.
     * 장면 정보 생성하기 [ADMIN]
     */
    async sceneControllerCreateSceneRaw(requestParameters: SceneControllerCreateSceneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['movieId'] == null) {
            throw new runtime.RequiredError(
                'movieId',
                'Required parameter "movieId" was null or undefined when calling sceneControllerCreateScene().'
            );
        }

        if (requestParameters['createSceneDto'] == null) {
            throw new runtime.RequiredError(
                'createSceneDto',
                'Required parameter "createSceneDto" was null or undefined when calling sceneControllerCreateScene().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/scenes/{movieId}`.replace(`{${"movieId"}}`, encodeURIComponent(String(requestParameters['movieId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSceneDtoToJSON(requestParameters['createSceneDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 새로운 장면 정보를 생성합니다.
     * 장면 정보 생성하기 [ADMIN]
     */
    async sceneControllerCreateScene(requestParameters: SceneControllerCreateSceneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sceneControllerCreateSceneRaw(requestParameters, initOverrides);
    }

    /**
     * 장면 정보 및 연결된 발화자, 대사를 삭제합니다.
     * 장면 삭제하기 [ADMIN]
     */
    async sceneControllerDeleteSceneRaw(requestParameters: SceneControllerDeleteSceneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sceneId'] == null) {
            throw new runtime.RequiredError(
                'sceneId',
                'Required parameter "sceneId" was null or undefined when calling sceneControllerDeleteScene().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/scenes/{sceneId}`.replace(`{${"sceneId"}}`, encodeURIComponent(String(requestParameters['sceneId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 장면 정보 및 연결된 발화자, 대사를 삭제합니다.
     * 장면 삭제하기 [ADMIN]
     */
    async sceneControllerDeleteScene(requestParameters: SceneControllerDeleteSceneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sceneControllerDeleteSceneRaw(requestParameters, initOverrides);
    }

    /**
     * 장면 아이디로 모든 발화자를 가져옵니다.
     * 장면 발화자 가져오기
     */
    async sceneControllerFindAllRaw(requestParameters: SceneControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sceneId'] == null) {
            throw new runtime.RequiredError(
                'sceneId',
                'Required parameter "sceneId" was null or undefined when calling sceneControllerFindAll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/scenes/{sceneId}/speakers`.replace(`{${"sceneId"}}`, encodeURIComponent(String(requestParameters['sceneId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 장면 아이디로 모든 발화자를 가져옵니다.
     * 장면 발화자 가져오기
     */
    async sceneControllerFindAll(requestParameters: SceneControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sceneControllerFindAllRaw(requestParameters, initOverrides);
    }

    /**
     * 모든 장면면을 가져옵니다(audioUrl 제외).
     * 모든 장면 가져오기
     */
    async sceneControllerFindAllSceneRaw(requestParameters: SceneControllerFindAllSceneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginationSceneResponseDto>> {
        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling sceneControllerFindAllScene().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling sceneControllerFindAllScene().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['keyword'] != null) {
            queryParameters['keyword'] = requestParameters['keyword'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/scenes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginationSceneResponseDtoFromJSON(jsonValue));
    }

    /**
     * 모든 장면면을 가져옵니다(audioUrl 제외).
     * 모든 장면 가져오기
     */
    async sceneControllerFindAllScene(requestParameters: SceneControllerFindAllSceneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginationSceneResponseDto> {
        const response = await this.sceneControllerFindAllSceneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 장면 정보와 해당 장면의 대본을 가져옵니다.     <br/>로그인 유저가 참여자인 경우 audioUrl을 반환합니다.
     * 장면 및 대본 가져오기
     */
    async sceneControllerFindSceneByIdRaw(requestParameters: SceneControllerFindSceneByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtendedSceneDto>> {
        if (requestParameters['sceneId'] == null) {
            throw new runtime.RequiredError(
                'sceneId',
                'Required parameter "sceneId" was null or undefined when calling sceneControllerFindSceneById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/scenes/{sceneId}`.replace(`{${"sceneId"}}`, encodeURIComponent(String(requestParameters['sceneId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtendedSceneDtoFromJSON(jsonValue));
    }

    /**
     * 장면 정보와 해당 장면의 대본을 가져옵니다.     <br/>로그인 유저가 참여자인 경우 audioUrl을 반환합니다.
     * 장면 및 대본 가져오기
     */
    async sceneControllerFindSceneById(requestParameters: SceneControllerFindSceneByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtendedSceneDto> {
        const response = await this.sceneControllerFindSceneByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 장면 정보를 변경합니다.
     * 장면 정보 변경하기
     */
    async sceneControllerUpdateSceneRaw(requestParameters: SceneControllerUpdateSceneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sceneId'] == null) {
            throw new runtime.RequiredError(
                'sceneId',
                'Required parameter "sceneId" was null or undefined when calling sceneControllerUpdateScene().'
            );
        }

        if (requestParameters['updateSceneDto'] == null) {
            throw new runtime.RequiredError(
                'updateSceneDto',
                'Required parameter "updateSceneDto" was null or undefined when calling sceneControllerUpdateScene().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/scenes/{sceneId}`.replace(`{${"sceneId"}}`, encodeURIComponent(String(requestParameters['sceneId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSceneDtoToJSON(requestParameters['updateSceneDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 장면 정보를 변경합니다.
     * 장면 정보 변경하기
     */
    async sceneControllerUpdateScene(requestParameters: SceneControllerUpdateSceneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sceneControllerUpdateSceneRaw(requestParameters, initOverrides);
    }

}
