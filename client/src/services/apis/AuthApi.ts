/* tslint:disable */
/* eslint-disable */
/**
 * Renglish API Swagger
 * Download: <a href=/api-docs-ahyeon-renglish-api/swagger-json target=\"_blank\">click here</a><br/><br/>github: <a href=\"https://github.com/ahyeon-jung/renglish\" target=\"_blank\">ahyeon-jung/renglish</a><br/>contact: ahyeon.aisha@gmail.com
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangePasswordDto,
  CreateUserDto,
  LoginDto,
} from '../models/index';
import {
    ChangePasswordDtoFromJSON,
    ChangePasswordDtoToJSON,
    CreateUserDtoFromJSON,
    CreateUserDtoToJSON,
    LoginDtoFromJSON,
    LoginDtoToJSON,
} from '../models/index';

export interface AuthControllerChangePasswordRequest {
    changePasswordDto: ChangePasswordDto;
}

export interface AuthControllerLoginRequest {
    loginDto: LoginDto;
}

export interface AuthControllerSignupRequest {
    createUserDto: CreateUserDto;
}

export interface AuthControllerValidateTokenRequest {
    token: string;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * 사용자가 비밀번호 변경을 시도합니다.
     * 비밀번호 변경
     */
    async authControllerChangePasswordRaw(requestParameters: AuthControllerChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['changePasswordDto'] == null) {
            throw new runtime.RequiredError(
                'changePasswordDto',
                'Required parameter "changePasswordDto" was null or undefined when calling authControllerChangePassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/password/change`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordDtoToJSON(requestParameters['changePasswordDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 사용자가 비밀번호 변경을 시도합니다.
     * 비밀번호 변경
     */
    async authControllerChangePassword(requestParameters: AuthControllerChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerChangePasswordRaw(requestParameters, initOverrides);
    }

    /**
     * 현재 사용자가 관리자인지 확인합니다.
     * 관리자 확인 [TOKEN]
     */
    async authControllerCheckAdminByTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/check/is-admin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 현재 사용자가 관리자인지 확인합니다.
     * 관리자 확인 [TOKEN]
     */
    async authControllerCheckAdminByToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerCheckAdminByTokenRaw(initOverrides);
    }

    /**
     * 사용자가 로그인을 시도합니다.
     * 로그인
     */
    async authControllerLoginRaw(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['loginDto'] == null) {
            throw new runtime.RequiredError(
                'loginDto',
                'Required parameter "loginDto" was null or undefined when calling authControllerLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDtoToJSON(requestParameters['loginDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 사용자가 로그인을 시도합니다.
     * 로그인
     */
    async authControllerLogin(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerLoginRaw(requestParameters, initOverrides);
    }

    /**
     * 유효한 Refresh Token을 이용해 새로운 Access Token과 Refresh Token을 발급받습니다.
     * Access Token 재발급
     */
    async authControllerRefreshRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 유효한 Refresh Token을 이용해 새로운 Access Token과 Refresh Token을 발급받습니다.
     * Access Token 재발급
     */
    async authControllerRefresh(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerRefreshRaw(initOverrides);
    }

    /**
     * 새로운 사용자를 생성합니다.
     * 회원가입 [EMAIL VERIFICATION]
     */
    async authControllerSignupRaw(requestParameters: AuthControllerSignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createUserDto'] == null) {
            throw new runtime.RequiredError(
                'createUserDto',
                'Required parameter "createUserDto" was null or undefined when calling authControllerSignup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserDtoToJSON(requestParameters['createUserDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 새로운 사용자를 생성합니다.
     * 회원가입 [EMAIL VERIFICATION]
     */
    async authControllerSignup(requestParameters: AuthControllerSignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerSignupRaw(requestParameters, initOverrides);
    }

    /**
     * 토큰이 유효한지 확인합니다.
     * 토큰 유효성 검사 [TOKEN]
     */
    async authControllerValidateTokenRaw(requestParameters: AuthControllerValidateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling authControllerValidateToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/token/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 토큰이 유효한지 확인합니다.
     * 토큰 유효성 검사 [TOKEN]
     */
    async authControllerValidateToken(requestParameters: AuthControllerValidateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerValidateTokenRaw(requestParameters, initOverrides);
    }

}
