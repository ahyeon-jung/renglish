/* tslint:disable */
/* eslint-disable */
/**
 * Renglish API Swagger
 * Download: <a href=/api-docs-ahyeon-renglish-api/swagger-json target=\"_blank\">click here</a><br/><br/>github: <a href=\"https://github.com/ahyeon-jung/renglish\" target=\"_blank\">ahyeon-jung/renglish</a><br/>contact: ahyeon.aisha@gmail.com
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface NoticeControllerCreateRequest {
    body: object;
}

export interface NoticeControllerFindOneRequest {
    noticeId: string;
}

export interface NoticeControllerRemoveRequest {
    noticeId: string;
}

export interface NoticeControllerUpdateRequest {
    noticeId: string;
    body: object;
}

/**
 * 
 */
export class NoticesApi extends runtime.BaseAPI {

    /**
     * 공지사항을 추가합니다.
     * 공지사항 작성 [ADMIN]
     */
    async noticeControllerCreateRaw(requestParameters: NoticeControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling noticeControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/notices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 공지사항을 추가합니다.
     * 공지사항 작성 [ADMIN]
     */
    async noticeControllerCreate(requestParameters: NoticeControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.noticeControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * 모든 공지사항을 가져옵니다.
     * 모든 공지사항 가져오기
     */
    async noticeControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/notices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 모든 공지사항을 가져옵니다.
     * 모든 공지사항 가져오기
     */
    async noticeControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.noticeControllerFindAllRaw(initOverrides);
    }

    /**
     * 해당 ID의 공지사항을 가져옵니다.
     * 해당 ID 공지사항 가져오기
     */
    async noticeControllerFindOneRaw(requestParameters: NoticeControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['noticeId'] == null) {
            throw new runtime.RequiredError(
                'noticeId',
                'Required parameter "noticeId" was null or undefined when calling noticeControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/notices/{noticeId}`.replace(`{${"noticeId"}}`, encodeURIComponent(String(requestParameters['noticeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 해당 ID의 공지사항을 가져옵니다.
     * 해당 ID 공지사항 가져오기
     */
    async noticeControllerFindOne(requestParameters: NoticeControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.noticeControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     * 해당 ID의 공지사항을 삭제합니다.
     * 해당 ID 공지사항 삭제 [ADMIN]
     */
    async noticeControllerRemoveRaw(requestParameters: NoticeControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['noticeId'] == null) {
            throw new runtime.RequiredError(
                'noticeId',
                'Required parameter "noticeId" was null or undefined when calling noticeControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/notices/{noticeId}`.replace(`{${"noticeId"}}`, encodeURIComponent(String(requestParameters['noticeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 해당 ID의 공지사항을 삭제합니다.
     * 해당 ID 공지사항 삭제 [ADMIN]
     */
    async noticeControllerRemove(requestParameters: NoticeControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.noticeControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     * 해당 ID의 공지사항을 업데이트합니다.
     * 공지사항 수정 [ADMIN]
     */
    async noticeControllerUpdateRaw(requestParameters: NoticeControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['noticeId'] == null) {
            throw new runtime.RequiredError(
                'noticeId',
                'Required parameter "noticeId" was null or undefined when calling noticeControllerUpdate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling noticeControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/notices/{noticeId}`.replace(`{${"noticeId"}}`, encodeURIComponent(String(requestParameters['noticeId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 해당 ID의 공지사항을 업데이트합니다.
     * 공지사항 수정 [ADMIN]
     */
    async noticeControllerUpdate(requestParameters: NoticeControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.noticeControllerUpdateRaw(requestParameters, initOverrides);
    }

}
