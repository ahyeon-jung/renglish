/* tslint:disable */
/* eslint-disable */
/**
 * Renglish API Swagger
 * Download: <a href=/api-docs-ahyeon-renglish-api/swagger-json target=\"_blank\">click here</a><br/><br/>github: <a href=\"https://github.com/ahyeon-jung/renglish\" target=\"_blank\">ahyeon-jung/renglish</a><br/>contact: ahyeon.aisha@gmail.com
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';

export interface InquiryControllerCreateRequest {
  body: object;
}

export interface InquiryControllerFindOneRequest {
  inquiryId: string;
}

export interface InquiryControllerRemoveRequest {
  inquiryId: string;
}

export interface InquiryControllerUpdateRequest {
  inquiryId: string;
  body: object;
}

/**
 *
 */
export class InquiriesApi extends runtime.BaseAPI {
  /**
   * 문의사항을 작성합니다.
   * 문의사항 작성 [TOKEN]
   */
  async inquiryControllerCreateRaw(
    requestParameters: InquiryControllerCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['body'] == null) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter "body" was null or undefined when calling inquiryControllerCreate().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('token', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/inquiries`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters['body'] as any,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 문의사항을 작성합니다.
   * 문의사항 작성 [TOKEN]
   */
  async inquiryControllerCreate(
    requestParameters: InquiryControllerCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.inquiryControllerCreateRaw(requestParameters, initOverrides);
  }

  /**
   * 모든 문의사항을 가져옵니다.
   * 모든 문의사항 가져오기
   */
  async inquiryControllerFindAllRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('token', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/inquiries`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 모든 문의사항을 가져옵니다.
   * 모든 문의사항 가져오기
   */
  async inquiryControllerFindAll(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.inquiryControllerFindAllRaw(initOverrides);
  }

  /**
   * 해당 ID의 문의사항을 가져옵니다.
   * 해당 ID 문의사항 가져오기
   */
  async inquiryControllerFindOneRaw(
    requestParameters: InquiryControllerFindOneRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['inquiryId'] == null) {
      throw new runtime.RequiredError(
        'inquiryId',
        'Required parameter "inquiryId" was null or undefined when calling inquiryControllerFindOne().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('token', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/inquiries/{inquiryId}`.replace(
          `{${'inquiryId'}}`,
          encodeURIComponent(String(requestParameters['inquiryId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 해당 ID의 문의사항을 가져옵니다.
   * 해당 ID 문의사항 가져오기
   */
  async inquiryControllerFindOne(
    requestParameters: InquiryControllerFindOneRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.inquiryControllerFindOneRaw(requestParameters, initOverrides);
  }

  /**
   * 해당 ID의 문의사항을 삭제합니다.
   * 해당 ID 문의사항 삭제 [TOKEN]
   */
  async inquiryControllerRemoveRaw(
    requestParameters: InquiryControllerRemoveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['inquiryId'] == null) {
      throw new runtime.RequiredError(
        'inquiryId',
        'Required parameter "inquiryId" was null or undefined when calling inquiryControllerRemove().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('token', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/inquiries/{inquiryId}`.replace(
          `{${'inquiryId'}}`,
          encodeURIComponent(String(requestParameters['inquiryId'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 해당 ID의 문의사항을 삭제합니다.
   * 해당 ID 문의사항 삭제 [TOKEN]
   */
  async inquiryControllerRemove(
    requestParameters: InquiryControllerRemoveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.inquiryControllerRemoveRaw(requestParameters, initOverrides);
  }

  /**
   * 해당 ID의 문의사항을 업데이트합니다.
   * 문의사항 수정 [TOKEN]
   */
  async inquiryControllerUpdateRaw(
    requestParameters: InquiryControllerUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['inquiryId'] == null) {
      throw new runtime.RequiredError(
        'inquiryId',
        'Required parameter "inquiryId" was null or undefined when calling inquiryControllerUpdate().',
      );
    }

    if (requestParameters['body'] == null) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter "body" was null or undefined when calling inquiryControllerUpdate().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('token', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/inquiries/{inquiryId}`.replace(
          `{${'inquiryId'}}`,
          encodeURIComponent(String(requestParameters['inquiryId'])),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters['body'] as any,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 해당 ID의 문의사항을 업데이트합니다.
   * 문의사항 수정 [TOKEN]
   */
  async inquiryControllerUpdate(
    requestParameters: InquiryControllerUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.inquiryControllerUpdateRaw(requestParameters, initOverrides);
  }
}
