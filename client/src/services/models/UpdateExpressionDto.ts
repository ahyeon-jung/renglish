/* tslint:disable */
/* eslint-disable */
/**
 * Renglish API Swagger
 * Download: <a href=/api-docs-ahyeon-renglish-api/swagger-json target=\"_blank\">click here</a><br/><br/>github: <a href=\"https://github.com/ahyeon-jung/renglish\" target=\"_blank\">ahyeon-jung/renglish</a><br/>contact: ahyeon.aisha@gmail.com
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExampleDto } from './ExampleDto';
import {
    ExampleDtoFromJSON,
    ExampleDtoFromJSONTyped,
    ExampleDtoToJSON,
    ExampleDtoToJSONTyped,
} from './ExampleDto';

/**
 * 
 * @export
 * @interface UpdateExpressionDto
 */
export interface UpdateExpressionDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateExpressionDto
     */
    expression?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExpressionDto
     */
    meaning?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExpressionDto
     */
    usage?: string;
    /**
     * 영어 예문과 한글 번역 배열 (최대 2개)
     * @type {Array<ExampleDto>}
     * @memberof UpdateExpressionDto
     */
    examples?: Array<ExampleDto>;
}

/**
 * Check if a given object implements the UpdateExpressionDto interface.
 */
export function instanceOfUpdateExpressionDto(value: object): value is UpdateExpressionDto {
    return true;
}

export function UpdateExpressionDtoFromJSON(json: any): UpdateExpressionDto {
    return UpdateExpressionDtoFromJSONTyped(json, false);
}

export function UpdateExpressionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateExpressionDto {
    if (json == null) {
        return json;
    }
    return {
        
        'expression': json['expression'] == null ? undefined : json['expression'],
        'meaning': json['meaning'] == null ? undefined : json['meaning'],
        'usage': json['usage'] == null ? undefined : json['usage'],
        'examples': json['examples'] == null ? undefined : ((json['examples'] as Array<any>).map(ExampleDtoFromJSON)),
    };
}

export function UpdateExpressionDtoToJSON(json: any): UpdateExpressionDto {
    return UpdateExpressionDtoToJSONTyped(json, false);
}

export function UpdateExpressionDtoToJSONTyped(value?: UpdateExpressionDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'expression': value['expression'],
        'meaning': value['meaning'],
        'usage': value['usage'],
        'examples': value['examples'] == null ? undefined : ((value['examples'] as Array<any>).map(ExampleDtoToJSON)),
    };
}

