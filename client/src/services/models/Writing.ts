/* tslint:disable */
/* eslint-disable */
/**
 * Renglish API Swagger
 * Download: <a href=/api-docs-ahyeon-renglish-api/swagger-json target=\"_blank\">click here</a><br/><br/>github: <a href=\"https://github.com/ahyeon-jung/renglish\" target=\"_blank\">ahyeon-jung/renglish</a><br/>contact: ahyeon.aisha@gmail.com
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Writing
 */
export interface Writing {
    /**
     * 아이디
     * @type {string}
     * @memberof Writing
     */
    id: string;
    /**
     * 생성일
     * @type {Date}
     * @memberof Writing
     */
    createdAt: Date;
    /**
     * 수정일
     * @type {Date}
     * @memberof Writing
     */
    updatedAt: Date;
    /**
     * 삭제일
     * @type {Date}
     * @memberof Writing
     */
    deletedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Writing
     */
    writing: string;
}

/**
 * Check if a given object implements the Writing interface.
 */
export function instanceOfWriting(value: object): value is Writing {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('deletedAt' in value) || value['deletedAt'] === undefined) return false;
    if (!('writing' in value) || value['writing'] === undefined) return false;
    return true;
}

export function WritingFromJSON(json: any): Writing {
    return WritingFromJSONTyped(json, false);
}

export function WritingFromJSONTyped(json: any, ignoreDiscriminator: boolean): Writing {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'deletedAt': (new Date(json['deletedAt'])),
        'writing': json['writing'],
    };
}

export function WritingToJSON(json: any): Writing {
    return WritingToJSONTyped(json, false);
}

export function WritingToJSONTyped(value?: Writing | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
        'deletedAt': ((value['deletedAt']).toISOString()),
        'writing': value['writing'],
    };
}

